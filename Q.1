Q.1
a.) 
import numpy as np

# Create a two-dimensional array ARR1 with random values from 0 to 1
ARR1 = np.random.rand(3, 4)

# Compute mean, standard deviation, and variance along the second axis
mean_arr1 = np.mean(ARR1, axis=1)
std_arr1 = np.std(ARR1, axis=1)
var_arr1 = np.var(ARR1, axis=1)

print("ARR1:\n", ARR1)
print("Mean along the second axis:", mean_arr1)
print("Standard Deviation along the second axis:", std_arr1)
print("Variance along the second axis:", var_arr1)


b.)
import numpy as np

# Get user inputs for m and n
m = int(input("Enter the number of rows (m): "))
n = int(input("Enter the number of columns (n): "))

# Create a 2D array of size m x n with integer elements
array_b = np.random.randint(0, 100, size=(m, n))

# Print shape, type, and data type of the array
print("Array Shape:", array_b.shape)
print("Array Type:", type(array_b))
print("Array Data Type:", array_b.dtype)

# Reshape the array into an n x m array
array_b_reshaped = array_b.reshape((n, m))

print("Reshaped Array:\n", array_b_reshaped)

c.)
import numpy as np

# Create a 1D array with random values
arr_c = np.random.randn(10)

# Test for zero, non-zero, and NaN elements
zero_indices = np.where(arr_c == 0)[0]
non_zero_indices = np.where(arr_c != 0)[0]
nan_indices = np.where(np.isnan(arr_c))[0]

print("Original Array:", arr_c)
print("Indices of Zero Elements:", zero_indices)
print("Indices of Non-Zero Elements:", non_zero_indices)
print("Indices of NaN Elements:", nan_indices)

d.)
import numpy as np

# Create three random arrays
Array1 = np.random.rand(5)
Array2 = np.random.rand(5)
Array3 = np.random.rand(5)

# Subtract Array2 from Array3 and store in Array4
Array4 = Array3 - Array2

# Create Array5 with two times the values in Array1
Array5 = 2 * Array1

# Find Covariance and Correlation
covariance = np.cov(Array1, Array4)[0, 1]
correlation = np.corrcoef(Array1, Array5)[0, 1]

print("Array1:", Array1)
print("Array2:", Array2)
print("Array3:", Array3)
print("Array4 (Array3 - Array2):", Array4)
print("Array5 (2 * Array1):", Array5)
print("Covariance between Array1 and Array4:", covariance)
print("Correlation between Array1 and Array5:", correlation)

e.)
import numpy as np

# Create two random arrays of size 10
Array1_e = np.random.rand(10)
Array2_e = np.random.rand(10)

# Find the sum of the first half and product of the second half
sum_first_half = np.sum(Array1_e[:5] + Array2_e[:5])
product_second_half = np.prod(Array1_e[5:] * Array2_e[5:])

print("Array1:", Array1_e)
print("Array2:", Array2_e)
print("Sum of the first half:", sum_first_half)
print("Product of the second half:", product_second_half)

f.)
import numpy as np

# Create an array with random values
arr_f = np.random.rand(5, 5)

# Determine the size of the memory occupied by the array
memory_size = arr_f.nbytes

print("Array:\n", arr_f)
print("Memory Size (in bytes):", memory_size)

g.) 
import numpy as np

# Create a 2D array of size m x n with integer elements in the range (10, 100)
m_g, n_g = 3, 4
array_g = np.random.randint(10, 100, size=(m_g, n_g))

# Swap two rows
array_g[[0, 1]] = array_g[[1, 0]]

# Reverse a specified column (let's say the second column)
array_g[:, 1] = array_g[::-1, 1]

print("Original Array:\n", array_g)

